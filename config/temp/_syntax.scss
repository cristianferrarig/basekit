Syntax::Highlighter

$syntax-colors: (
  tag:       "#000080",
  attribute: "#008080",
  string:    "#DD1144",
  comment:   "#999988",
);

.highlight {

  & {
    background-color: #f8f8f8;
  }

  table {
    td {
      padding: 5px;
    }
    pre {
      margin: 0;
    }
  }

  .cm  { color: #999988; font-style: italic; }
  .cp  { color: #999999; font-weight: bold; }
  .c1  { color: #999988; font-style: italic; }
  .cs  { color: #999999; font-weight: bold; font-style: italic; }
  .c,
  .cd  { color: #999988; font-style: italic; }
  .err { color: #a61717; background-color: #e3d2d2; }
  .gd  { color: #000000; background-color: #ffdddd; }
  .ge  { color: #000000; font-style: italic; }
  .gr  { color: #aa0000; }
  .gh  { color: #999999; }
  .gi  { color: #000000; background-color: #ddffdd; }
  .go  { color: #888888; }
  .gp  { color: #555555; }
  .gs  { font-weight: bold; }
  .gu  { color: #aaaaaa; }
  .gt  { color: #aa0000; }
  .kc  { color: #000000; font-weight: bold; }
  .kd  { color: #000000; font-weight: bold; }
  .kn  { color: #000000; font-weight: bold; }
  .kp  { color: #000000; font-weight: bold; }
  .kr  { color: #000000; font-weight: bold; }
  .kt  { color: #445588; font-weight: bold; }
  .k,
  .kv  { color: #000000; font-weight: bold; }
  .mf  { color: #009999; }
  .mh  { color: #009999; }
  .il  { color: #009999; }
  .mi  { color: #009999; }
  .mo  { color: #009999; }
  .m,
  .mb,
  .mx  { color: #009999; }
  .sb  { color: #DD1144; }
  .sc  { color: #DD1144; }
  .sd  { color: #DD1144; }
  .s2  { color: #DD1144; }
  .se  { color: #DD1144; }
  .sh  { color: #DD1144; }
  .si  { color: #DD1144; }
  .sx  { color: #DD1144; }
  .sr  { color: #009926; }
  .s1  { color: #DD1144; }
  .ss  { color: #990073; }
  .s   { color: #DD1144; }
  .na  { color: #008080; }
  .bp  { color: #999999; }
  .nb  { color: #0086B3; }
  .nc  { color: #445588; font-weight: bold; }
  .no  { color: #008080; }
  .nd  { color: #3c5d5d; font-weight: bold; }
  .ni  { color: #800080; }
  .ne  { color: #990000; font-weight: bold; }
  .nf  { color: #990000; font-weight: bold; }
  .nl  { color: #990000; font-weight: bold; }
  .nn  { color: #555555; }
  .nt  { color: #000080; }
  .vc  { color: #008080; }
  .vg  { color: #008080; }
  .vi  { color: #008080; }
  .nv  { color: #008080; }
  .ow  { color: #000000; font-weight: bold; }
  .o   { color: #000000; font-weight: bold; }
  .w   { color: #bbbbbb; }

}




module Rouge
  module Themes
    class Github < CSSTheme
      name 'github'

      style Comment::Multiline,               :fg => '#999988', :italic => true
      style Comment::Preproc,                 :fg => '#999999', :bold => true
      style Comment::Single,                  :fg => '#999988', :italic => true
      style Comment::Special,                 :fg => '#999999', :italic => true, :bold => true
      style Comment,                          :fg => '#999988', :italic => true
      style Error,                            :fg => '#a61717', :bg => '#e3d2d2'
      style Generic::Deleted,                 :fg => '#000000', :bg => '#ffdddd'
      style Generic::Emph,                    :fg => '#000000', :italic => true
      style Generic::Error,                   :fg => '#aa0000'
      style Generic::Heading,                 :fg => '#999999'
      style Generic::Inserted,                :fg => '#000000', :bg => '#ddffdd'
      style Generic::Output,                  :fg => '#888888'
      style Generic::Prompt,                  :fg => '#555555'
      style Generic::Strong,                  :bold => true
      style Generic::Subheading,              :fg => '#aaaaaa'
      style Generic::Traceback,               :fg => '#aa0000'
      style Keyword::Constant,                :fg => '#000000', :bold => true
      style Keyword::Declaration,             :fg => '#000000', :bold => true
      style Keyword::Namespace,               :fg => '#000000', :bold => true
      style Keyword::Pseudo,                  :fg => '#000000', :bold => true
      style Keyword::Reserved,                :fg => '#000000', :bold => true
      style Keyword::Type,                    :fg => '#445588', :bold => true
      style Keyword,                          :fg => '#000000', :bold => true
      style Literal::Number::Float,           :fg => '#009999'
      style Literal::Number::Hex,             :fg => '#009999'
      style Literal::Number::Integer::Long,   :fg => '#009999'
      style Literal::Number::Integer,         :fg => '#009999'
      style Literal::Number::Oct,             :fg => '#009999'
      style Literal::Number,                  :fg => '#009999'
      style Literal::String::Backtick,        :fg => '#d14'
      style Literal::String::Char,            :fg => '#d14'
      style Literal::String::Doc,             :fg => '#d14'
      style Literal::String::Double,          :fg => '#d14'
      style Literal::String::Escape,          :fg => '#d14'
      style Literal::String::Heredoc,         :fg => '#d14'
      style Literal::String::Interpol,        :fg => '#d14'
      style Literal::String::Other,           :fg => '#d14'
      style Literal::String::Regex,           :fg => '#009926'
      style Literal::String::Single,          :fg => '#d14'
      style Literal::String::Symbol,          :fg => '#990073'
      style Literal::String,                  :fg => '#d14'
      style Name::Attribute,                  :fg => '#008080'
      style Name::Builtin::Pseudo,            :fg => '#999999'
      style Name::Builtin,                    :fg => '#0086B3'
      style Name::Class,                      :fg => '#445588', :bold => true
      style Name::Constant,                   :fg => '#008080'
      style Name::Decorator,                  :fg => '#3c5d5d', :bold => true
      style Name::Entity,                     :fg => '#800080'
      style Name::Exception,                  :fg => '#990000', :bold => true
      style Name::Function,                   :fg => '#990000', :bold => true
      style Name::Label,                      :fg => '#990000', :bold => true
      style Name::Namespace,                  :fg => '#555555'
      style Name::Tag,                        :fg => '#000080'
      style Name::Variable::Class,            :fg => '#008080'
      style Name::Variable::Global,           :fg => '#008080'
      style Name::Variable::Instance,         :fg => '#008080'
      style Name::Variable,                   :fg => '#008080'
      style Operator::Word,                   :fg => '#000000', :bold => true
      style Operator,                         :fg => '#000000', :bold => true
      style Text::Whitespace,                 :fg => '#bbbbbb'
      style Text,                             :bg => '#f8f8f8'
    end
  end
end



    module Tokens
      def self.token(name, shortname, &b)
        tok = Token.make_token(name, shortname, &b)
        const_set(name, tok)
      end

      # XXX IMPORTANT XXX
      # For compatibility, this list must be kept in sync with
      # pygments.token.STANDARD_TYPES
      # please see https://github.com/jneen/rouge/wiki/List-of-tokens
      token :Text, '' do
        token :Whitespace, 'w'
      end

      token :Error, 'err'
      token :Other, 'x'

      token :Keyword, 'k' do
        token :Constant,    'kc'
        token :Declaration, 'kd'
        token :Namespace,   'kn'
        token :Pseudo,      'kp'
        token :Reserved,    'kr'
        token :Type,        'kt'
        token :Variable,    'kv'
      end

      token :Name, 'n' do
        token :Attribute,    'na'
        token :Builtin,      'nb' do
          token :Pseudo,     'bp'
        end
        token :Class,        'nc'
        token :Constant,     'no'
        token :Decorator,    'nd'
        token :Entity,       'ni'
        token :Exception,    'ne'
        token :Function,     'nf'
        token :Property,     'py'
        token :Label,        'nl'
        token :Namespace,    'nn'
        token :Other,        'nx'
        token :Tag,          'nt'
        token :Variable,     'nv' do
          token :Class,      'vc'
          token :Global,     'vg'
          token :Instance,   'vi'
        end
      end

      token :Literal,      'l' do
        token :Date,       'ld'

        token :String,     's' do
          token :Backtick, 'sb'
          token :Char,     'sc'
          token :Doc,      'sd'
          token :Double,   's2'
          token :Escape,   'se'
          token :Heredoc,  'sh'
          token :Interpol, 'si'
          token :Other,    'sx'
          token :Regex,    'sr'
          token :Single,   's1'
          token :Symbol,   'ss'
        end

        token :Number,     'm' do
          token :Float,    'mf'
          token :Hex,      'mh'
          token :Integer,  'mi' do
            token :Long,   'il'
          end
          token :Oct,      'mo'
          token :Bin,      'mb'
          token :Other,    'mx'
        end
      end

      token :Operator, 'o' do
        token :Word,   'ow'
      end

      token :Punctuation, 'p' do
        token :Indicator, 'pi'
      end

      token :Comment,     'c' do
        token :Doc,       'cd'
        token :Multiline, 'cm'
        token :Preproc,   'cp'
        token :Single,    'c1'
        token :Special,   'cs'
      end

      token :Generic,      'g' do
        token :Deleted,    'gd'
        token :Emph,       'ge'
        token :Error,      'gr'
        token :Heading,    'gh'
        token :Inserted,   'gi'
        token :Output,     'go'
        token :Prompt,     'gp'
        token :Strong,     'gs'
        token :Subheading, 'gu'
        token :Traceback,  'gt'
        token :Lineno,     'gl'
      end

      # convenience
      Num = Literal::Number
      Str = Literal::String
    end
  end




.codehilite .hll { background-color: #ffffcc }
.codehilite .c { color: #999988; font-style: italic } /* Comment */
.codehilite .err { color: #a61717; background-color: #e3d2d2 } /* Error */
.codehilite .k { color: #000000; font-weight: bold } /* Keyword */
.codehilite .o { color: #000000; font-weight: bold } /* Operator */
.codehilite .cm { color: #999988; font-style: italic } /* Comment.Multiline */
.codehilite .cp { color: #999999; font-weight: bold; font-style: italic } /* Comment.Preproc */
.codehilite .c1 { color: #999988; font-style: italic } /* Comment.Single */
.codehilite .cs { color: #999999; font-weight: bold; font-style: italic } /* Comment.Special */
.codehilite .gd { color: #000000; background-color: #ffdddd } /* Generic.Deleted */
.codehilite .ge { color: #000000; font-style: italic } /* Generic.Emph */
.codehilite .gr { color: #aa0000 } /* Generic.Error */
.codehilite .gh { color: #999999 } /* Generic.Heading */
.codehilite .gi { color: #000000; background-color: #ddffdd } /* Generic.Inserted */
.codehilite .go { color: #888888 } /* Generic.Output */
.codehilite .gp { color: #555555 } /* Generic.Prompt */
.codehilite .gs { font-weight: bold } /* Generic.Strong */
.codehilite .gu { color: #aaaaaa } /* Generic.Subheading */
.codehilite .gt { color: #aa0000 } /* Generic.Traceback */
.codehilite .kc { color: #000000; font-weight: bold } /* Keyword.Constant */
.codehilite .kd { color: #000000; font-weight: bold } /* Keyword.Declaration */
.codehilite .kn { color: #000000; font-weight: bold } /* Keyword.Namespace */
.codehilite .kp { color: #000000; font-weight: bold } /* Keyword.Pseudo */
.codehilite .kr { color: #000000; font-weight: bold } /* Keyword.Reserved */
.codehilite .kt { color: #445588; font-weight: bold } /* Keyword.Type */
.codehilite .m { color: #009999 } /* Literal.Number */
.codehilite .s { color: #d01040 } /* Literal.String */
.codehilite .na { color: #008080 } /* Name.Attribute */
.codehilite .nb { color: #0086B3 } /* Name.Builtin */
.codehilite .nc { color: #445588; font-weight: bold } /* Name.Class */
.codehilite .no { color: #008080 } /* Name.Constant */
.codehilite .nd { color: #3c5d5d; font-weight: bold } /* Name.Decorator */
.codehilite .ni { color: #800080 } /* Name.Entity */
.codehilite .ne { color: #990000; font-weight: bold } /* Name.Exception */
.codehilite .nf { color: #990000; font-weight: bold } /* Name.Function */
.codehilite .nl { color: #990000; font-weight: bold } /* Name.Label */
.codehilite .nn { color: #555555 } /* Name.Namespace */
.codehilite .nt { color: #000080 } /* Name.Tag */
.codehilite .nv { color: #008080 } /* Name.Variable */
.codehilite .ow { color: #000000; font-weight: bold } /* Operator.Word */
.codehilite .w { color: #bbbbbb } /* Text.Whitespace */
.codehilite .mf { color: #009999 } /* Literal.Number.Float */
.codehilite .mh { color: #009999 } /* Literal.Number.Hex */
.codehilite .mi { color: #009999 } /* Literal.Number.Integer */
.codehilite .mo { color: #009999 } /* Literal.Number.Oct */
.codehilite .sb { color: #d01040 } /* Literal.String.Backtick */
.codehilite .sc { color: #d01040 } /* Literal.String.Char */
.codehilite .sd { color: #d01040 } /* Literal.String.Doc */
.codehilite .s2 { color: #d01040 } /* Literal.String.Double */
.codehilite .se { color: #d01040 } /* Literal.String.Escape */
.codehilite .sh { color: #d01040 } /* Literal.String.Heredoc */
.codehilite .si { color: #d01040 } /* Literal.String.Interpol */
.codehilite .sx { color: #d01040 } /* Literal.String.Other */
.codehilite .sr { color: #009926 } /* Literal.String.Regex */
.codehilite .s1 { color: #d01040 } /* Literal.String.Single */
.codehilite .ss { color: #990073 } /* Literal.String.Symbol */
.codehilite .bp { color: #999999 } /* Name.Builtin.Pseudo */
.codehilite .vc { color: #008080 } /* Name.Variable.Class */
.codehilite .vg { color: #008080 } /* Name.Variable.Global */
.codehilite .vi { color: #008080 } /* Name.Variable.Instance */
.codehilite .il { color: #009999 } /* Literal.Number.Integer.Long */


